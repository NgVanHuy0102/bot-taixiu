import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import datetime
import json
import requests

TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
ADMIN_ID = 123456789  # thay b·∫±ng ID Telegram c·ªßa em n·∫øu c·∫ßn
KEYS_FILE = "keys.json"
API_URL = "https://api.sunwin.fake/linkapi"  # thay b·∫±ng API chu·∫©n n·∫øu c√≥

logging.basicConfig(level=logging.INFO)

# Load v√† l∆∞u key
def load_keys():
    try:
        with open(KEYS_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

def save_keys(keys):
    with open(KEYS_FILE, "w") as f:
        json.dump(keys, f)

# T·∫°o key m·ªõi
def create_key(user_id, start_date, end_date):
    keys = load_keys()
    keys[str(user_id)] = {
        "start": start_date.strftime("%Y-%m-%d"),
        "end": end_date.strftime("%Y-%m-%d")
    }
    save_keys(keys)

# Ki·ªÉm tra key c√≤n h·∫°n
def is_key_valid(user_id):
    keys = load_keys()
    info = keys.get(str(user_id))
    if not info:
        return False
    today = datetime.date.today()
    end_date = datetime.datetime.strptime(info["end"], "%Y-%m-%d").date()
    return today <= end_date

# G·ªçi API SunWin
def fetch_data_from_api():
    try:
        response = requests.get(API_URL)
        if response.status_code == 200:
            return response.text
        else:
            return "L·ªói API: " + str(response.status_code)
    except:
        return "Kh√¥ng th·ªÉ k·∫øt n·ªëi API."

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if is_key_valid(user_id):
        await update.message.reply_text("‚úÖ Key h·ª£p l·ªá! B·∫°n c√≥ th·ªÉ d√πng bot.")
    else:
        await update.message.reply_text("üîí B·∫°n ch∆∞a c√≥ key ho·∫∑c ƒë√£ h·∫øt h·∫°n. Li√™n h·ªá admin ƒë·ªÉ nh·∫≠n key.")

# /taokey YYYY-MM-DD ƒë·∫øn YYYY-MM-DD
async def taokey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    try:
        args = " ".join(context.args)
        parts = args.split("ƒë·∫øn")
        start = datetime.datetime.strptime(parts[0].strip(), "%Y-%m-%d").date()
        end = datetime.datetime.strptime(parts[1].strip(), "%Y-%m-%d").date()
        if update.message.reply_to_message:
            target_id = update.message.reply_to_message.from_user.id
        else:
            target_id = user_id
        create_key(target_id, start, end)
        await update.message.reply_text(f"‚úÖ ƒê√£ t·∫°o key t·ª´ {start} ƒë·∫øn {end} cho user {target_id}.")
    except:
        await update.message.reply_text("‚ùå Sai c√∫ ph√°p. D√πng: /taokey YYYY-MM-DD ƒë·∫øn YYYY-MM-DD (tr·∫£ l·ªùi tin nh·∫Øn ng∆∞·ªùi c·∫ßn key n·∫øu kh√¥ng ph·∫£i ch√≠nh em).")

# /data
async def getdata(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_key_valid(user_id):
        await update.message.reply_text("üîí Key h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i.")
        return

    data = fetch_data_from_api()
    await update.message.reply_text(f"D·ªØ li·ªáu: {data}")

# Main
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("taokey", taokey))
app.add_handler(CommandHandler("data", getdata))

if _name_ == "_main_":
    app.run_polling()